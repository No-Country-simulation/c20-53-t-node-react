// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  EMPLOYEE
  ADMIN
}

enum Status {
  PENDING
  PREPARING
  READY
  SERVED
  COMPLETED
  CANCELLED
}

enum Payment {
  CREDIT
  DEBIT
  CASH
}

model Users {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  password String
  email    String  @unique
  phone    String
  Role     Role    @default(CLIENT)
  Active   Boolean @default(true)

  orders       Order[] @relation("ClientOrders")
  servedOrders Order[] @relation("WaiterOrders")
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  deleted Boolean  @default(false)
  Dishes  Dishes[]
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clientID    String   @db.ObjectId
  waiterID    String   @db.ObjectId
  date        DateTime @default(now()) @db.Date
  hour        String
  totalAmount Float
  Status      Status

  client       Users          @relation(name: "ClientOrders", fields: [clientID], references: [id])
  waiter       Users          @relation(name: "WaiterOrders", fields: [waiterID], references: [id])
  OrderDetail  OrderDetail[]
  OrderHistory OrderHistory[]
  Purcharses   Purcharses[]
}

model Dishes {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  photo       String
  categoryID  String  @db.ObjectId
  active      Boolean @default(true)
  deleted     Boolean @default(false)

  Category    Category      @relation(fields: [categoryID], references: [id])
  OrderDetail OrderDetail[]
}

model OrderDetail {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  orderID  String @db.ObjectId
  disheID  String @db.ObjectId
  quantity Int
  subTotal Float

  Order Order  @relation(fields: [orderID], references: [id])
  Dishe Dishes @relation(fields: [disheID], references: [id])
}

model OrderHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderID    String   @db.ObjectId
  status     Status
  changeHour String
  date       DateTime @default(now()) @db.Date

  Order Order @relation(fields: [orderID], references: [id])
}

model Purcharses {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  orderID String   @db.ObjectId
  date    DateTime @default(now()) @db.Date
  hour    String
  mount   Float
  payment Payment

  Order Order @relation(fields: [orderID], references: [id])
}
